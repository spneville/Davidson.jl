var documenterSearchIndex = {"docs":
[{"location":"allowed_types/#Allowed-types","page":"Allowed types","title":"Allowed types","text":"","category":"section"},{"location":"allowed_types/#AllowedTypes","page":"Allowed types","title":"Allowed matrix types","text":"","category":"section"},{"location":"allowed_types/#Davidson.AllowedTypes","page":"Allowed types","title":"Davidson.AllowedTypes","text":"AllowedTypes = Union{Float32, Float64, ComplexF32, ComplexF64}\n\nThe allowed types T of the matrix whose eigenpairs are to be computed.\n\n\n\n\n\n","category":"type"},{"location":"allowed_types/#AllowedFloat","page":"Allowed types","title":"Allowed real types","text":"","category":"section"},{"location":"allowed_types/#Davidson.AllowedFloat","page":"Allowed types","title":"Davidson.AllowedFloat","text":"AllowedFloat = Union{Float32, Float64}\n\nThe allowed types R of the eigenvalues and on-diagonal matrix elements.\n\n\n\n\n\n","category":"type"},{"location":"allowed_types/#Compatible-types","page":"Allowed types","title":"Compatible types","text":"","category":"section"},{"location":"allowed_types/","page":"Allowed types","title":"Allowed types","text":"The arrays of type R<:AllowedFloat supplied to the solver and solver! functions must be compatible with the arrays of type R<:AllowedTypes. For example, if T==ComplexF64, then it is required that R==Float64. The following table lists the compatible type pairs:","category":"page"},{"location":"allowed_types/","page":"Allowed types","title":"Allowed types","text":"T R\nFloat32 Float32\nFloat64 Float64\nComplexF32 Float32\nComplexF64 Float64","category":"page"},{"location":"work_arrays/#WorkArrays","page":"Creating work arrays","title":"Creating work arrays","text":"","category":"section"},{"location":"work_arrays/#Required-work-arrays","page":"Creating work arrays","title":"Required work arrays","text":"","category":"section"},{"location":"work_arrays/","page":"Creating work arrays","title":"Creating work arrays","text":"The in-place solver! function can be made essentially allocation free via the passing of pre-allocated work arrays.","category":"page"},{"location":"work_arrays/","page":"Creating work arrays","title":"Creating work arrays","text":"Two work vectors have to be supplied:","category":"page"},{"location":"work_arrays/","page":"Creating work arrays","title":"Creating work arrays","text":"Twork::Vector{T}, where T<:AllowedTypes\nRwork::Vector{R}, where R<AllowedFloat","category":"page"},{"location":"work_arrays/","page":"Creating work arrays","title":"Creating work arrays","text":"where the types T and R are compatible (see Allowed types)","category":"page"},{"location":"work_arrays/#Dimensions-of-Twork-and-Rwork","page":"Creating work arrays","title":"Dimensions of Twork and Rwork","text":"","category":"section"},{"location":"work_arrays/","page":"Creating work arrays","title":"Creating work arrays","text":"The required dimensions of the Twork and Rwork vectors are dependent on the size of the matrix being diagonalised, the block size, and the maximum subspace dimension. There exist two functions, Tworksize and Rworksize, that can be used to compute these dimensions.","category":"page"},{"location":"solver_inplace/#solver!","page":"solver!","title":"solver!","text":"","category":"section"},{"location":"solver_inplace/","page":"solver!","title":"solver!","text":"This section details the use of the solver! function, which is an in-place version of the solver function","category":"page"},{"location":"solver_inplace/#Davidson.solver!","page":"solver!","title":"Davidson.solver!","text":"solver!(vectors, values, f, diag, nroots, matdim, [Twork, Rwork];\n        tol=1e-4, blocksize=nroots+5, maxvec=4*blocksize, niter=100,\n        verbose=false, guess=false)\n\nArguments\n\nvectors::Matrix{T}: Eigenvectors, where T<:AllowedTypes\nvalues::Vector{R}: Eigenvalues, where R<:AllowedFloat\nf::Function: In-place matrix-vector multiplication function\ndiag::Matrix{T}: Diagonal of the matrix whose eigenpairs are sought, where T<:AllowedTypes\nnroots::Int64: Number of eigenpairs to compute\nmatdim::Int64: Dimension of the matrix\n\nOptional arguments\n\nThe following two pre-allocated work arrays may be supplied:\n\nTwork::Vector{T}: Type T<:AllowedTypes work array\nRwork::Vector{R}: Type R<:AllowedFloat work array\n\nSee Work arrays for the procedure for determining the required length of thse vectors.\n\nOptional keyword arguments\n\ntol::Float64: Residual norm convergence threshold\nblocksize::Int64: Block size\nmaxvec::Int64: Maximum subspace dimension\nniter::Int64: Maximum number of iterations\nverbose::Bool: Verbose output flag. If true, then a summary is printed                  at the end of each iteration\nguess::Bool: If true, then on input, the vectors array is taken to                contain the guess vectors\n\n\n\n\n\n","category":"function"},{"location":"matvec/#matvec","page":"Matrix-vector multiplication function","title":"Matrix-Vector Multiplication","text":"","category":"section"},{"location":"matvec/","page":"Matrix-vector multiplication function","title":"Matrix-vector multiplication function","text":"This section details the required form of the in-place matrix-vector multiplication function f that the solver and solver! functions take as an argument.","category":"page"},{"location":"matvec/#Arguments-of-the-function-f","page":"Matrix-vector multiplication function","title":"Arguments of the function f","text":"","category":"section"},{"location":"matvec/","page":"Matrix-vector multiplication function","title":"Matrix-vector multiplication function","text":"v::AbstractMatrix{T}: Vectors to be multiplied by the matrix A, where T<:AllowedTypes\nAv::AbstractMatrix{T}: Matrix-vector products, where T<:AllowedTypes","category":"page"},{"location":"matvec/","page":"Matrix-vector multiplication function","title":"Matrix-vector multiplication function","text":"Here, the columns of the matrices v and Av contain the vectors in question.","category":"page"},{"location":"matvec/","page":"Matrix-vector multiplication function","title":"Matrix-vector multiplication function","text":"The function must take the following form, where T<:AllowedTypes:","category":"page"},{"location":"matvec/","page":"Matrix-vector multiplication function","title":"Matrix-vector multiplication function","text":"function f!(v::AbstractMatrix{T}, Av::AbstractMatrix{T})\n\n# The contents of the function will be application-dependent,\n# but the matrix A will be applied to the vectors contained in\n# v to yield the vectors in Av\n\nend","category":"page"},{"location":"solver/#solver","page":"solver","title":"solver","text":"","category":"section"},{"location":"solver/","page":"solver","title":"solver","text":"This section details the use of the solver function, which computes a given number of the lowest-lying eigenpairs of a given matrix A in a 'matrix-free' manner. That is, only a function returning matrix-vector products is required as input, as opposed to the matrix itself.","category":"page"},{"location":"solver/#Davidson.solver","page":"solver","title":"Davidson.solver","text":"solver(f, diag, nroots, matdim; tol=1e-4, blocksize=nroots+5,\n       maxvec=4*blocksize, niter=100, verbose=false)\n\nArguments\n\nf::Function: In-place matrix-vector multiplication function\ndiag::Matrix{T}: Diagonal of the matrix whose eigenpairs are sought, where T<:AllowedTypes\nnroots::Int64: Number of eigenpairs to compute\nmatdim::Int64: Dimension of the matrix\n\nOptional keyword arguments\n\ntol::Float64: Residual norm convergence threshold\nblocksize::Int64: Block size\nmaxvec::Int64: Maximum subspace dimension\nniter::Int64: Maximum number of iterations\nverbose::Bool: Verbose output flag. If true, then a summary is printed                  at the end of each iteration\n\nReturn values\n\nThe return value is of the form vectors, values = solver(â€¦), where\n\nvectors::Matrix{T}: Matrix of eigenvectors\nvalues::Vector{R}: Vector of eigenvalues\n\nA note on the matrix-vector multiplication function\n\nLet the matrix whose eigenpairs are sought be denoted by A. The in-place Function f recieves takes as arguments an AbstractMatrix{T} of vectors v and an AbstractMatrix{T} of matrix-vector products Av that is to be computed, where T<:AllowedTypes. The required form of this function is detailed in Matrix-vector multiplication function section.\n\n\n\n\n\n","category":"function"},{"location":"#man-davidson","page":"Home","title":"Davidson.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package implementing the Davidson algorithm for the calculation of the lowest-lying eigenpairs of large, sparse, diagonally dominant Hermitian matrices.","category":"page"}]
}
